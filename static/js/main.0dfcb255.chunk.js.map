{"version":3,"sources":["FractalEncryption.js","index.js"],"names":["FractalEncryption","outputDict","name","data","inputDict","useState","sellPrices","setSellPrices","buyPrices","setBuyPrices","matSum","setMatSum","totalOutput","setTotalOutput","trueValue","setTrueValue","cost","setCost","junkValue","useEffect","idList","Object","keys","concat","endpoint","fetch","then","response","json","jsonResponse","i","id","sellPrice","sells","unit_price","buyPrice","buys","newSellPrices","values","map","newBuyPrices","dataList","prev","length","error","console","log","newTotal","newTrueValue","newCost","reduce","a","b","className","index","entries","key","value","colSpan","Math","floor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAEe,SAASA,IAEtB,IAAMC,EAAa,CACjB,MAAO,CACLC,KAAM,uBACNC,KAAM,MAER,MAAO,CACLD,KAAM,aACNC,KAAM,MAER,MAAO,CACLD,KAAM,aACNC,KAAM,MAER,MAAO,CACLD,KAAM,4BACNC,KAAM,MAER,MAAO,CACLD,KAAM,aACNC,KAAM,MAER,MAAO,CACLD,KAAM,cACNC,KAAM,MAER,MAAO,CACLD,KAAM,kBACNC,KAAM,MAER,MAAO,CACLD,KAAM,mBACNC,KAAM,MAER,MAAO,CACLD,KAAM,oBACNC,KAAM,QAIJC,EAAY,CAChB,MAAO,CACLF,KAAM,oBACNC,KAAM,GAER,MAAO,CACLD,KAAM,qBACNC,KAAM,IAGV,EAAoCE,mBAAS,MAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAkCF,mBAAS,MAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAEA,EAA4BJ,mBAAS,GAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAAsCN,mBAAS,GAA/C,mBAAOO,EAAP,KAAoBC,EAApB,KACA,EAAkCR,mBAAS,GAA3C,mBAAOS,EAAP,KAAkBC,EAAlB,KACA,EAAwBV,mBAAS,GAAjC,mBAAOW,EAAP,KAAaC,EAAb,KAGMC,EAAY,QAkDlB,OAhDAC,qBAAU,WACR,IAAMC,EAASC,OAAOC,KAAKrB,GAAYsB,OAAOF,OAAOC,KAAKlB,IAEtDoB,EAAQ,UADF,sDACE,OAAYJ,GAExBK,MAAMD,GACHE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAiB,IAAD,gBACNA,GADM,IACpB,2BAA4B,CAAC,IAApBC,EAAmB,QAEpBC,EAAKD,EAAEC,GACTA,KAAM9B,IACRA,EAAW8B,GAAX,2BAAqB9B,EAAW8B,IAAQ,CAACC,UAAWF,EAAEG,MAAMC,cAE1DH,KAAM3B,IACRA,EAAU2B,GAAV,2BAAoB3B,EAAU2B,IAAQ,CAACI,SAAUL,EAAEM,KAAKF,eARxC,8BAgBpB,IALA,IAAMG,EAAgBhB,OAAOiB,OAAOrC,GAAYsC,KAAI,SAAAT,GAAC,OAAIA,EAAEE,aACrDQ,EAAenB,OAAOiB,OAAOlC,GAAWmC,KAAI,SAAAT,GAAC,OAAIA,EAAEK,YACnDM,EAAWpB,OAAOiB,OAAOrC,GAAYsC,KAAI,SAAAT,GAAC,OAAIA,EAAE3B,QAblC,WAgBX2B,GACPnB,GAAU,SAAA+B,GAAI,OAAIA,EAAOL,EAAcP,GAAKW,EAASX,OAD9CA,EAAI,EAAGA,EAAIO,EAAcM,OAAQb,IAAM,EAAvCA,GAKTvB,EAAc8B,GACd5B,EAAa+B,MACZ,SAAAI,GACDC,QAAQC,IAAIF,QAEf,IAGHzB,qBAAU,WACR,GAAIT,GAAUF,EAAW,CACvB,IAAMuC,EAAWrC,EAASQ,EACpB8B,EAAeD,EA1CN,IA2CTE,EAAUzC,EAAU0C,QAAO,SAACC,EAAEC,GAAH,OAASD,EAAEC,IAAG,GAE/CvC,EAAekC,GACfhC,EAAaiC,GACb/B,EAAQgC,MAET,CAACvC,EAAQF,IAGV,gCACE,oDAEA,kCACE,gCACE,+BACE,qBAAI6C,UAAU,WAAd,oBA1DS,OA4DRhC,OAAOiB,OAAOrC,GAAYsC,KAAI,SAAAT,GAAC,OAAI,6BAAkBA,EAAE5B,MAAX4B,EAAE5B,cAInD,kCACE,+BACE,oBAAImD,UAAU,WAAd,+BAEC/C,EAAaA,EAAWiC,KAAI,SAACT,EAAGwB,GAAJ,OAAc,6BAAiBxB,GAARwB,MAAmB,QAEzE,+BACE,oBAAID,UAAU,WAAd,mBAEChC,OAAOkC,QAAQtD,GAAYsC,KAAI,mCAAEiB,EAAF,KAAOC,EAAP,YAAkB,6BAAeA,EAAMtD,MAAZqD,SAE7D,+BACE,oBAAIH,UAAU,WAAd,2BAEA,oBAAIK,QAASpD,EAAaA,EAAWqC,OAAS,IAA9C,SAAoDjC,OAEtD,+BACE,oBAAI2C,UAAU,WAAd,+BAEA,6BAAKnC,OAEP,+BACE,oBAAImC,UAAU,WAAd,0BAEA,oBAAItB,GAAG,cAAc2B,QAAQ,IAA7B,SAAkC9C,IAClC,4CAAmB,mDAA0B,oDAC7C,oBAAI8C,QAAQ,SAEd,+BACE,oBAAIL,UAAU,WAAd,kCAEA,oBAAItB,GAAG,YAAY2B,QAAQ,IAA3B,SAAgC5C,IAChC,oBAAIiB,GAAG,OAAP,SAAef,IACdR,EAAYA,EAAU+B,KAAI,SAACT,EAAGwB,GAAJ,OAAc,6BAAiBxB,GAARwB,MAAmB,QAEvE,+BACE,oBAAID,UAAU,WAAd,2BAEA,6BAAKvC,EAAYE,EAAO,EAAnB,aACL,oBAAI0C,QAASpD,EAAaA,EAAWqC,OAAS,IAA9C,SAAoDgB,KAAKC,MAAM9C,EAAYE,iBC/JvF6C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC/D,EAAD,MAEFgE,SAASC,eAAe,W","file":"static/js/main.0dfcb255.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nexport default function FractalEncryption() {\n  // list of ids to fetch for sell price\n  const outputDict = {\n    24294: {\n      name: 'Vial of Potent Blood',\n      data: 3400\n    },\n    24341: {\n      name: 'Large Bone',\n      data: 3280\n    },\n    24350: {\n      name: 'Large Claw',\n      data: 3440\n    },\n    24276: {\n      name: 'Pile of Incandescent Dust',\n      data: 3230\n    },\n    24356: {\n      name: 'Large Fang',\n      data: 3555\n    },\n    24288: {\n      name: 'Large Scale',\n      data: 3260\n    },\n    24299: {\n      name: 'Intricate Totem',\n      data: 3480\n    },\n    24282: {\n      name: 'Potent Venom Sac',\n      data: 3605\n    },\n    49424: {\n      name: '+1 Agony Infusion',\n      data: 22523\n    }\n  }\n  // list of ids to fetch for buy price\n  const inputDict = {\n    73248: {\n      name: 'Stablizing Matrix',\n      data: 0\n    },\n    75919: {\n      name: 'Fractal Encryption',\n      data: 0\n    }\n  }\n  const [sellPrices, setSellPrices] = useState(null)\n  const [buyPrices, setBuyPrices] = useState(null)\n\n  const [matSum, setMatSum] = useState(0)\n  const [totalOutput, setTotalOutput] = useState(0)\n  const [trueValue, setTrueValue] = useState(0)\n  const [cost, setCost] = useState(0)\n  \n  const totalBoxes = 10000\n  const junkValue = 42729000\n\n  useEffect(() => {\n    const idList = Object.keys(outputDict).concat(Object.keys(inputDict))\n    let url = 'https://api.guildwars2.com/v2/commerce/prices?ids=' \n    let endpoint = `${url}${idList}`\n\n    fetch(endpoint)\n      .then(response => response.json())\n      .then(jsonResponse => {\n        for (let i of jsonResponse) {\n          // populate dicts with their buy/sell price\n          const id = i.id\n          if (id in outputDict) {\n            outputDict[id] = {...outputDict[id], ...{sellPrice: i.sells.unit_price}}\n          }\n          if (id in inputDict)\n            inputDict[id] = {...inputDict[id], ...{buyPrice: i.buys.unit_price}}\n        }\n\n        const newSellPrices = Object.values(outputDict).map(i => i.sellPrice)\n        const newBuyPrices = Object.values(inputDict).map(i => i.buyPrice)\n        const dataList = Object.values(outputDict).map(i => i.data)\n        \n        // calculate the material sum\n        for (let i = 0; i < newSellPrices.length; i++) {\n          setMatSum(prev => prev + newSellPrices[i] * dataList[i])\n        }\n\n        // update display states\n        setSellPrices(newSellPrices)\n        setBuyPrices(newBuyPrices)\n      }, error => {\n        console.log(error)\n      })\n  }, [])\n\n  // calculates and update cells that depend on the fetch requests\n  useEffect(() => {\n    if (matSum && buyPrices) {\n      const newTotal = matSum + junkValue\n      const newTrueValue = newTotal / totalBoxes\n      const newCost = buyPrices.reduce((a,b) => a+b, 0)\n  \n      setTotalOutput(newTotal)\n      setTrueValue(newTrueValue)\n      setCost(newCost)\n    }\n  }, [matSum, buyPrices])\n\n  return (\n    <div>\n      <h1>Fractal Encryption</h1>\n\n      <table>\n        <thead>\n          <tr>\n            <th className=\"row-name\">Boxes: {totalBoxes}</th>\n\n            {Object.values(outputDict).map(i => <th key={i.name}>{i.name}</th>)}\n          </tr>\n        </thead>\n\n        <tbody>\n          <tr>\n            <th className=\"row-name\">Sell price (coin)</th>\n\n            {sellPrices ? sellPrices.map((i, index) => <td key={index}>{i}</td>) : null}\n          </tr>\n          <tr>\n            <th className=\"row-name\">Count</th>\n\n            {Object.entries(outputDict).map(([key, value]) => <td key={key}>{value.data}</td>)}\n          </tr>\n          <tr>\n            <th className=\"row-name\">T5 sum (coin)</th>\n\n            <td colSpan={sellPrices ? sellPrices.length : '0'}>{matSum}</td>\n          </tr>\n          <tr>\n            <th className=\"row-name\">Junk value (coin)</th>\n\n            <td>{junkValue}</td>\n          </tr>\n          <tr>\n            <th className=\"row-name\">Total (coin)</th>\n\n            <td id=\"totalOutput\" colSpan='2'>{totalOutput}</td>\n            <th>Total Cost</th><th>Stablizing Matrix</th><th>Fractal Encryption</th>\n            <td colSpan='5'></td>\n          </tr>\n          <tr>\n            <th className=\"row-name\">Value per box (coin)</th>\n\n            <td id=\"trueValue\" colSpan='2'>{trueValue}</td>\n            <td id=\"cost\">{cost}</td>\n            {buyPrices ? buyPrices.map((i, index) => <td key={index}>{i}</td>) : null}\n          </tr>\n          <tr>\n            <th className=\"row-name\">Should I Buy?</th>\n\n            <td>{trueValue - cost > 0 ? `Yes` : `No`}</td>\n            <td colSpan={sellPrices ? sellPrices.length : '0'}>{Math.floor(trueValue - cost)}</td>\n          </tr>\n        </tbody>\n      </table>\n\n    </div>\n  );\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/stylesheet.css';\nimport FractalEncryption from './FractalEncryption';\n\nReactDOM.render(\n  <React.StrictMode>\n    <FractalEncryption />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}